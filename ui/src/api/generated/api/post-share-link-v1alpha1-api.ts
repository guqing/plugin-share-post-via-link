/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.17.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JsonPatchInner } from '../models';
// @ts-ignore
import { PostShareLink } from '../models';
// @ts-ignore
import { PostShareLinkList } from '../models';
/**
 * PostShareLinkV1alpha1Api - axios parameter creator
 * @export
 */
export const PostShareLinkV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create PostShareLink
         * @param {PostShareLink} [postShareLink] Fresh postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostShareLink: async (postShareLink?: PostShareLink, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/postshare.guqing.io/v1alpha1/postsharelinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postShareLink, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete PostShareLink
         * @param {string} name Name of postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostShareLink: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePostShareLink', 'name', name)
            const localVarPath = `/apis/postshare.guqing.io/v1alpha1/postsharelinks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get PostShareLink
         * @param {string} name Name of postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostShareLink: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getPostShareLink', 'name', name)
            const localVarPath = `/apis/postshare.guqing.io/v1alpha1/postsharelinks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List PostShareLink
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPostShareLink: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/postshare.guqing.io/v1alpha1/postsharelinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch PostShareLink
         * @param {string} name Name of postsharelink
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPostShareLink: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPostShareLink', 'name', name)
            const localVarPath = `/apis/postshare.guqing.io/v1alpha1/postsharelinks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update PostShareLink
         * @param {string} name Name of postsharelink
         * @param {PostShareLink} [postShareLink] Updated postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostShareLink: async (name: string, postShareLink?: PostShareLink, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updatePostShareLink', 'name', name)
            const localVarPath = `/apis/postshare.guqing.io/v1alpha1/postsharelinks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postShareLink, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostShareLinkV1alpha1Api - functional programming interface
 * @export
 */
export const PostShareLinkV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostShareLinkV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create PostShareLink
         * @param {PostShareLink} [postShareLink] Fresh postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostShareLink(postShareLink?: PostShareLink, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostShareLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPostShareLink(postShareLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete PostShareLink
         * @param {string} name Name of postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostShareLink(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostShareLink(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get PostShareLink
         * @param {string} name Name of postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostShareLink(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostShareLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostShareLink(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List PostShareLink
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPostShareLink(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostShareLinkList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPostShareLink(page, size, labelSelector, fieldSelector, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Patch PostShareLink
         * @param {string} name Name of postsharelink
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPostShareLink(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostShareLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPostShareLink(name, jsonPatchInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update PostShareLink
         * @param {string} name Name of postsharelink
         * @param {PostShareLink} [postShareLink] Updated postsharelink
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostShareLink(name: string, postShareLink?: PostShareLink, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostShareLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostShareLink(name, postShareLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostShareLinkV1alpha1Api - factory interface
 * @export
 */
export const PostShareLinkV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostShareLinkV1alpha1ApiFp(configuration)
    return {
        /**
         * Create PostShareLink
         * @param {PostShareLinkV1alpha1ApiCreatePostShareLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostShareLink(requestParameters: PostShareLinkV1alpha1ApiCreatePostShareLinkRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostShareLink> {
            return localVarFp.createPostShareLink(requestParameters.postShareLink, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete PostShareLink
         * @param {PostShareLinkV1alpha1ApiDeletePostShareLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostShareLink(requestParameters: PostShareLinkV1alpha1ApiDeletePostShareLinkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePostShareLink(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get PostShareLink
         * @param {PostShareLinkV1alpha1ApiGetPostShareLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostShareLink(requestParameters: PostShareLinkV1alpha1ApiGetPostShareLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PostShareLink> {
            return localVarFp.getPostShareLink(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List PostShareLink
         * @param {PostShareLinkV1alpha1ApiListPostShareLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPostShareLink(requestParameters: PostShareLinkV1alpha1ApiListPostShareLinkRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PostShareLinkList> {
            return localVarFp.listPostShareLink(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch PostShareLink
         * @param {PostShareLinkV1alpha1ApiPatchPostShareLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPostShareLink(requestParameters: PostShareLinkV1alpha1ApiPatchPostShareLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PostShareLink> {
            return localVarFp.patchPostShareLink(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update PostShareLink
         * @param {PostShareLinkV1alpha1ApiUpdatePostShareLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostShareLink(requestParameters: PostShareLinkV1alpha1ApiUpdatePostShareLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PostShareLink> {
            return localVarFp.updatePostShareLink(requestParameters.name, requestParameters.postShareLink, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPostShareLink operation in PostShareLinkV1alpha1Api.
 * @export
 * @interface PostShareLinkV1alpha1ApiCreatePostShareLinkRequest
 */
export interface PostShareLinkV1alpha1ApiCreatePostShareLinkRequest {
    /**
     * Fresh postsharelink
     * @type {PostShareLink}
     * @memberof PostShareLinkV1alpha1ApiCreatePostShareLink
     */
    readonly postShareLink?: PostShareLink
}

/**
 * Request parameters for deletePostShareLink operation in PostShareLinkV1alpha1Api.
 * @export
 * @interface PostShareLinkV1alpha1ApiDeletePostShareLinkRequest
 */
export interface PostShareLinkV1alpha1ApiDeletePostShareLinkRequest {
    /**
     * Name of postsharelink
     * @type {string}
     * @memberof PostShareLinkV1alpha1ApiDeletePostShareLink
     */
    readonly name: string
}

/**
 * Request parameters for getPostShareLink operation in PostShareLinkV1alpha1Api.
 * @export
 * @interface PostShareLinkV1alpha1ApiGetPostShareLinkRequest
 */
export interface PostShareLinkV1alpha1ApiGetPostShareLinkRequest {
    /**
     * Name of postsharelink
     * @type {string}
     * @memberof PostShareLinkV1alpha1ApiGetPostShareLink
     */
    readonly name: string
}

/**
 * Request parameters for listPostShareLink operation in PostShareLinkV1alpha1Api.
 * @export
 * @interface PostShareLinkV1alpha1ApiListPostShareLinkRequest
 */
export interface PostShareLinkV1alpha1ApiListPostShareLinkRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof PostShareLinkV1alpha1ApiListPostShareLink
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof PostShareLinkV1alpha1ApiListPostShareLink
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof PostShareLinkV1alpha1ApiListPostShareLink
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof PostShareLinkV1alpha1ApiListPostShareLink
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PostShareLinkV1alpha1ApiListPostShareLink
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchPostShareLink operation in PostShareLinkV1alpha1Api.
 * @export
 * @interface PostShareLinkV1alpha1ApiPatchPostShareLinkRequest
 */
export interface PostShareLinkV1alpha1ApiPatchPostShareLinkRequest {
    /**
     * Name of postsharelink
     * @type {string}
     * @memberof PostShareLinkV1alpha1ApiPatchPostShareLink
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof PostShareLinkV1alpha1ApiPatchPostShareLink
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updatePostShareLink operation in PostShareLinkV1alpha1Api.
 * @export
 * @interface PostShareLinkV1alpha1ApiUpdatePostShareLinkRequest
 */
export interface PostShareLinkV1alpha1ApiUpdatePostShareLinkRequest {
    /**
     * Name of postsharelink
     * @type {string}
     * @memberof PostShareLinkV1alpha1ApiUpdatePostShareLink
     */
    readonly name: string

    /**
     * Updated postsharelink
     * @type {PostShareLink}
     * @memberof PostShareLinkV1alpha1ApiUpdatePostShareLink
     */
    readonly postShareLink?: PostShareLink
}

/**
 * PostShareLinkV1alpha1Api - object-oriented interface
 * @export
 * @class PostShareLinkV1alpha1Api
 * @extends {BaseAPI}
 */
export class PostShareLinkV1alpha1Api extends BaseAPI {
    /**
     * Create PostShareLink
     * @param {PostShareLinkV1alpha1ApiCreatePostShareLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostShareLinkV1alpha1Api
     */
    public createPostShareLink(requestParameters: PostShareLinkV1alpha1ApiCreatePostShareLinkRequest = {}, options?: AxiosRequestConfig) {
        return PostShareLinkV1alpha1ApiFp(this.configuration).createPostShareLink(requestParameters.postShareLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete PostShareLink
     * @param {PostShareLinkV1alpha1ApiDeletePostShareLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostShareLinkV1alpha1Api
     */
    public deletePostShareLink(requestParameters: PostShareLinkV1alpha1ApiDeletePostShareLinkRequest, options?: AxiosRequestConfig) {
        return PostShareLinkV1alpha1ApiFp(this.configuration).deletePostShareLink(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get PostShareLink
     * @param {PostShareLinkV1alpha1ApiGetPostShareLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostShareLinkV1alpha1Api
     */
    public getPostShareLink(requestParameters: PostShareLinkV1alpha1ApiGetPostShareLinkRequest, options?: AxiosRequestConfig) {
        return PostShareLinkV1alpha1ApiFp(this.configuration).getPostShareLink(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List PostShareLink
     * @param {PostShareLinkV1alpha1ApiListPostShareLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostShareLinkV1alpha1Api
     */
    public listPostShareLink(requestParameters: PostShareLinkV1alpha1ApiListPostShareLinkRequest = {}, options?: AxiosRequestConfig) {
        return PostShareLinkV1alpha1ApiFp(this.configuration).listPostShareLink(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch PostShareLink
     * @param {PostShareLinkV1alpha1ApiPatchPostShareLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostShareLinkV1alpha1Api
     */
    public patchPostShareLink(requestParameters: PostShareLinkV1alpha1ApiPatchPostShareLinkRequest, options?: AxiosRequestConfig) {
        return PostShareLinkV1alpha1ApiFp(this.configuration).patchPostShareLink(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update PostShareLink
     * @param {PostShareLinkV1alpha1ApiUpdatePostShareLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostShareLinkV1alpha1Api
     */
    public updatePostShareLink(requestParameters: PostShareLinkV1alpha1ApiUpdatePostShareLinkRequest, options?: AxiosRequestConfig) {
        return PostShareLinkV1alpha1ApiFp(this.configuration).updatePostShareLink(requestParameters.name, requestParameters.postShareLink, options).then((request) => request(this.axios, this.basePath));
    }
}
